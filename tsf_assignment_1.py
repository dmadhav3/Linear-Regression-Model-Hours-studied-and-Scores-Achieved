# -*- coding: utf-8 -*-
"""TSF Assignment 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i2XAv0lMFEfDw3D3ePwdQoF132dYHcpe

**Name: Madhav Deshpande**

*Task 1: Linear Regression Model: Hours Studied and Scores*

*Data Science and Business Analytics Internship - TSF (May21)*
"""

#import necessary packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Upload file from computer
from google.colab import files
uploaded = files.upload()

#read file
import io
df1 = pd.read_csv(io.BytesIO(uploaded['Data.csv']))

#First 5 records
df1.head()

#Last 5 records
df1.tail()

#Separating X and Y data 
x=df1.iloc[:, 0].values
y=df1.iloc[:, 1].values

#Scatter plot to visualize relationship between the data
plt.scatter(x,y,s=10)
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.show()

"""When we plot the scatter plot we observe that more the number of hours the student studies the higher the chances of scoring a greater  percentage. """

#Split into train and test data to build model (80:20 Ratio)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2, random_state=0)

x_train

#Build the model 
from sklearn.linear_model import LinearRegression
x_train=x_train.reshape(-1,1)
model = LinearRegression()

model.fit(x_train,y_train)

print(model.intercept_)

print(model.coef_)

# Plotting the regression line
line = (model.coef_*x)+ (model.intercept_)

# Plotting for the test data
plt.scatter(x, y)
plt.plot(x, line);
plt.show()

"""Making Predictions"""

x_test=x_test.reshape(-1,1)
y_pred = model.predict(x_test)

y_pred

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

#Evaluating the model
from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))

# test with specific data
hours = np.array([9.25])
hours = hours.reshape(-1,1)
own_pred = model.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))